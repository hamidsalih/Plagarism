/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PlagiarismDocument as PrismaPlagiarismDocument,
} from "@prisma/client";

export class PlagiarismDocumentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlagiarismDocumentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.plagiarismDocument.count(args);
  }

  async plagiarismDocuments(
    args: Prisma.PlagiarismDocumentFindManyArgs
  ): Promise<PrismaPlagiarismDocument[]> {
    return this.prisma.plagiarismDocument.findMany(args);
  }
  async plagiarismDocument(
    args: Prisma.PlagiarismDocumentFindUniqueArgs
  ): Promise<PrismaPlagiarismDocument | null> {
    return this.prisma.plagiarismDocument.findUnique(args);
  }
  async createPlagiarismDocument(
    args: Prisma.PlagiarismDocumentCreateArgs
  ): Promise<PrismaPlagiarismDocument> {
    return this.prisma.plagiarismDocument.create(args);
  }
  async updatePlagiarismDocument(
    args: Prisma.PlagiarismDocumentUpdateArgs
  ): Promise<PrismaPlagiarismDocument> {
    return this.prisma.plagiarismDocument.update(args);
  }
  async deletePlagiarismDocument(
    args: Prisma.PlagiarismDocumentDeleteArgs
  ): Promise<PrismaPlagiarismDocument> {
    return this.prisma.plagiarismDocument.delete(args);
  }
}
