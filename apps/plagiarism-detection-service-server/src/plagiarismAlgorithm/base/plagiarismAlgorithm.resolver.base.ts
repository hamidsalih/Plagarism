/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PlagiarismAlgorithm } from "./PlagiarismAlgorithm";
import { PlagiarismAlgorithmCountArgs } from "./PlagiarismAlgorithmCountArgs";
import { PlagiarismAlgorithmFindManyArgs } from "./PlagiarismAlgorithmFindManyArgs";
import { PlagiarismAlgorithmFindUniqueArgs } from "./PlagiarismAlgorithmFindUniqueArgs";
import { DeletePlagiarismAlgorithmArgs } from "./DeletePlagiarismAlgorithmArgs";
import { PlagiarismAlgorithmService } from "../plagiarismAlgorithm.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlagiarismAlgorithm)
export class PlagiarismAlgorithmResolverBase {
  constructor(
    protected readonly service: PlagiarismAlgorithmService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlagiarismAlgorithm",
    action: "read",
    possession: "any",
  })
  async _plagiarismAlgorithmsMeta(
    @graphql.Args() args: PlagiarismAlgorithmCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlagiarismAlgorithm])
  @nestAccessControl.UseRoles({
    resource: "PlagiarismAlgorithm",
    action: "read",
    possession: "any",
  })
  async plagiarismAlgorithms(
    @graphql.Args() args: PlagiarismAlgorithmFindManyArgs
  ): Promise<PlagiarismAlgorithm[]> {
    return this.service.plagiarismAlgorithms(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlagiarismAlgorithm, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlagiarismAlgorithm",
    action: "read",
    possession: "own",
  })
  async plagiarismAlgorithm(
    @graphql.Args() args: PlagiarismAlgorithmFindUniqueArgs
  ): Promise<PlagiarismAlgorithm | null> {
    const result = await this.service.plagiarismAlgorithm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlagiarismAlgorithm)
  @nestAccessControl.UseRoles({
    resource: "PlagiarismAlgorithm",
    action: "delete",
    possession: "any",
  })
  async deletePlagiarismAlgorithm(
    @graphql.Args() args: DeletePlagiarismAlgorithmArgs
  ): Promise<PlagiarismAlgorithm | null> {
    try {
      return await this.service.deletePlagiarismAlgorithm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
