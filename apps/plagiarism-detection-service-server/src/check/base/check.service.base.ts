/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Check as PrismaCheck } from "@prisma/client";
import { CheckDto } from "../CheckDto";

export class CheckServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CheckCountArgs, "select">): Promise<number> {
    return this.prisma.check.count(args);
  }

  async checks(args: Prisma.CheckFindManyArgs): Promise<PrismaCheck[]> {
    return this.prisma.check.findMany(args);
  }
  async check(args: Prisma.CheckFindUniqueArgs): Promise<PrismaCheck | null> {
    return this.prisma.check.findUnique(args);
  }
  async createCheck(args: Prisma.CheckCreateArgs): Promise<PrismaCheck> {
    return this.prisma.check.create(args);
  }
  async updateCheck(args: Prisma.CheckUpdateArgs): Promise<PrismaCheck> {
    return this.prisma.check.update(args);
  }
  async deleteCheck(args: Prisma.CheckDeleteArgs): Promise<PrismaCheck> {
    return this.prisma.check.delete(args);
  }
  async CreateCheck(args: CheckDto): Promise<CheckDto> {
    throw new Error("Not implemented");
  }
  async GetCheck(args: string): Promise<CheckDto> {
    throw new Error("Not implemented");
  }
}
