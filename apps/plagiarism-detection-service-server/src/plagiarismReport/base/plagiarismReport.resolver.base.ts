/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PlagiarismReport } from "./PlagiarismReport";
import { PlagiarismReportCountArgs } from "./PlagiarismReportCountArgs";
import { PlagiarismReportFindManyArgs } from "./PlagiarismReportFindManyArgs";
import { PlagiarismReportFindUniqueArgs } from "./PlagiarismReportFindUniqueArgs";
import { DeletePlagiarismReportArgs } from "./DeletePlagiarismReportArgs";
import { PlagiarismReportService } from "../plagiarismReport.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlagiarismReport)
export class PlagiarismReportResolverBase {
  constructor(
    protected readonly service: PlagiarismReportService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlagiarismReport",
    action: "read",
    possession: "any",
  })
  async _plagiarismReportsMeta(
    @graphql.Args() args: PlagiarismReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlagiarismReport])
  @nestAccessControl.UseRoles({
    resource: "PlagiarismReport",
    action: "read",
    possession: "any",
  })
  async plagiarismReports(
    @graphql.Args() args: PlagiarismReportFindManyArgs
  ): Promise<PlagiarismReport[]> {
    return this.service.plagiarismReports(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlagiarismReport, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlagiarismReport",
    action: "read",
    possession: "own",
  })
  async plagiarismReport(
    @graphql.Args() args: PlagiarismReportFindUniqueArgs
  ): Promise<PlagiarismReport | null> {
    const result = await this.service.plagiarismReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlagiarismReport)
  @nestAccessControl.UseRoles({
    resource: "PlagiarismReport",
    action: "delete",
    possession: "any",
  })
  async deletePlagiarismReport(
    @graphql.Args() args: DeletePlagiarismReportArgs
  ): Promise<PlagiarismReport | null> {
    try {
      return await this.service.deletePlagiarismReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
