/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SimilarityCheck as PrismaSimilarityCheck,
  Document as PrismaDocument,
  AnalysisResult as PrismaAnalysisResult,
} from "@prisma/client";

export class SimilarityCheckServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SimilarityCheckCountArgs, "select">
  ): Promise<number> {
    return this.prisma.similarityCheck.count(args);
  }

  async similarityChecks(
    args: Prisma.SimilarityCheckFindManyArgs
  ): Promise<PrismaSimilarityCheck[]> {
    return this.prisma.similarityCheck.findMany(args);
  }
  async similarityCheck(
    args: Prisma.SimilarityCheckFindUniqueArgs
  ): Promise<PrismaSimilarityCheck | null> {
    return this.prisma.similarityCheck.findUnique(args);
  }
  async createSimilarityCheck(
    args: Prisma.SimilarityCheckCreateArgs
  ): Promise<PrismaSimilarityCheck> {
    return this.prisma.similarityCheck.create(args);
  }
  async updateSimilarityCheck(
    args: Prisma.SimilarityCheckUpdateArgs
  ): Promise<PrismaSimilarityCheck> {
    return this.prisma.similarityCheck.update(args);
  }
  async deleteSimilarityCheck(
    args: Prisma.SimilarityCheckDeleteArgs
  ): Promise<PrismaSimilarityCheck> {
    return this.prisma.similarityCheck.delete(args);
  }

  async getDocument(parentId: string): Promise<PrismaDocument | null> {
    return this.prisma.similarityCheck
      .findUnique({
        where: { id: parentId },
      })
      .document();
  }

  async getAnalysisResult(
    parentId: string
  ): Promise<PrismaAnalysisResult | null> {
    return this.prisma.similarityCheck
      .findUnique({
        where: { id: parentId },
      })
      .analysisResult();
  }
}
