/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SimilarityCheck } from "./SimilarityCheck";
import { SimilarityCheckCountArgs } from "./SimilarityCheckCountArgs";
import { SimilarityCheckFindManyArgs } from "./SimilarityCheckFindManyArgs";
import { SimilarityCheckFindUniqueArgs } from "./SimilarityCheckFindUniqueArgs";
import { CreateSimilarityCheckArgs } from "./CreateSimilarityCheckArgs";
import { UpdateSimilarityCheckArgs } from "./UpdateSimilarityCheckArgs";
import { DeleteSimilarityCheckArgs } from "./DeleteSimilarityCheckArgs";
import { Document } from "../../document/base/Document";
import { AnalysisResult } from "../../analysisResult/base/AnalysisResult";
import { SimilarityCheckService } from "../similarityCheck.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SimilarityCheck)
export class SimilarityCheckResolverBase {
  constructor(
    protected readonly service: SimilarityCheckService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SimilarityCheck",
    action: "read",
    possession: "any",
  })
  async _similarityChecksMeta(
    @graphql.Args() args: SimilarityCheckCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SimilarityCheck])
  @nestAccessControl.UseRoles({
    resource: "SimilarityCheck",
    action: "read",
    possession: "any",
  })
  async similarityChecks(
    @graphql.Args() args: SimilarityCheckFindManyArgs
  ): Promise<SimilarityCheck[]> {
    return this.service.similarityChecks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SimilarityCheck, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SimilarityCheck",
    action: "read",
    possession: "own",
  })
  async similarityCheck(
    @graphql.Args() args: SimilarityCheckFindUniqueArgs
  ): Promise<SimilarityCheck | null> {
    const result = await this.service.similarityCheck(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SimilarityCheck)
  @nestAccessControl.UseRoles({
    resource: "SimilarityCheck",
    action: "create",
    possession: "any",
  })
  async createSimilarityCheck(
    @graphql.Args() args: CreateSimilarityCheckArgs
  ): Promise<SimilarityCheck> {
    return await this.service.createSimilarityCheck({
      ...args,
      data: {
        ...args.data,

        document: args.data.document
          ? {
              connect: args.data.document,
            }
          : undefined,

        analysisResult: args.data.analysisResult
          ? {
              connect: args.data.analysisResult,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SimilarityCheck)
  @nestAccessControl.UseRoles({
    resource: "SimilarityCheck",
    action: "update",
    possession: "any",
  })
  async updateSimilarityCheck(
    @graphql.Args() args: UpdateSimilarityCheckArgs
  ): Promise<SimilarityCheck | null> {
    try {
      return await this.service.updateSimilarityCheck({
        ...args,
        data: {
          ...args.data,

          document: args.data.document
            ? {
                connect: args.data.document,
              }
            : undefined,

          analysisResult: args.data.analysisResult
            ? {
                connect: args.data.analysisResult,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SimilarityCheck)
  @nestAccessControl.UseRoles({
    resource: "SimilarityCheck",
    action: "delete",
    possession: "any",
  })
  async deleteSimilarityCheck(
    @graphql.Args() args: DeleteSimilarityCheckArgs
  ): Promise<SimilarityCheck | null> {
    try {
      return await this.service.deleteSimilarityCheck(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Document, {
    nullable: true,
    name: "document",
  })
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async getDocument(
    @graphql.Parent() parent: SimilarityCheck
  ): Promise<Document | null> {
    const result = await this.service.getDocument(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AnalysisResult, {
    nullable: true,
    name: "analysisResult",
  })
  @nestAccessControl.UseRoles({
    resource: "AnalysisResult",
    action: "read",
    possession: "any",
  })
  async getAnalysisResult(
    @graphql.Parent() parent: SimilarityCheck
  ): Promise<AnalysisResult | null> {
    const result = await this.service.getAnalysisResult(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
